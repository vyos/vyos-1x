#!/usr/bin/env python3
#
# numeric value validator
#
# Copyright (C) 2017 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
import re

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--float", action="store_true", help="Accept floating point values")
group = parser.add_mutually_exclusive_group()
group.add_argument("-r", "--range", type=str, help="Check if the number is within range (inclusive), example: 1024-65535", action='append')
group.add_argument("-n", "--non-negative", action="store_true", help="Check if the number is non-negative (>= 0)")
group.add_argument("-p", "--positive", action="store_true", help="Check if the number is positive (> 0)")
parser.add_argument("number", type=str, help="Number to validate")

args = parser.parse_args()

# Try to load the argument
number = None
if args.float:
    try:
        number = float(args.number)
    except:
        print("{0} is not a valid floating point number".format(args.number), file=sys.stderr)
        sys.exit(1)
else:
    try:
        number = int(args.number)
    except:
        print("{0} is not a valid integer number".format(args.number), file=sys.stderr)
        sys.exit(1)

if args.range:
    valid = False
    for r in args.range:
        try:
            lower, upper = re.match(r'(\d+)\s*\-\s*(\d+)', r).groups()
            lower, upper = int(lower), int(upper)
        except:
            print("{0} is not a valid number range",format(args.range), file=sys.stderr)
            sys.exit(1)

        if (number >= lower) and (number <= upper):
            valid = True
    # end for

    if not valid:
        if len(args.range) > 1:
            err_msg = "Number {0} is not in any of the ranges {1}".format(number, args.range)
        else:
            err_msg = "Number {0} is not in the range {1}".format(number, args.range[0])
        print(err_msg, file=sys.stderr)
        sys.exit(1)
elif args.non_negative:
    if number < 0:
        print("Number should be non-negative", file=sys.stderr)
        sys.exit(1)
elif args.positive:
    if number <= 0:
        print("Number should be positive", file=sys.stderr)
        sys.exit(1)

