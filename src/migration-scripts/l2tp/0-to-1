#!/usr/bin/env python3

# Unclutter L2TP VPN configuiration - move radius-server top level tag
# nodes to a regular node which now also configures the radius source address
# used when querying a radius server

import sys

from vyos.configtree import ConfigTree

if (len(sys.argv) < 1):
    print("Must specify file name!")
    sys.exit(1)

file_name = sys.argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

config = ConfigTree(config_file)

cfg_base = ['vpn', 'l2tp', 'remote-access', 'authentication']
if not config.exists(cfg_base):
    # Nothing to do
    sys.exit(0)
else:
    # Migrate "vpn l2tp authentication radius-source-address" to new
    # "vpn l2tp authentication radius source-address"
    if config.exists(cfg_base + ['radius-source-address']):
        address = config.return_value(cfg_base + ['radius-source-address'])
        # delete old configuration node
        config.delete(cfg_base + ['radius-source-address'])
        # write new configuration node
        config.set(cfg_base + ['radius', 'source-address'], value=address)

    # Migrate "vpn l2tp authentication radius-server" tag node to new
    # "vpn l2tp authentication radius server" tag node
    if config.exists(cfg_base + ['radius-server']):
        for server in config.list_nodes(cfg_base + ['radius-server']):
            base_server = cfg_base + ['radius-server', server]
            key = config.return_value(base_server + ['key'])

            # delete old configuration node
            config.delete(base_server)
            # write new configuration node
            config.set(cfg_base + ['radius', 'server', server, 'key'], value=key)

            # format as tag node
            config.set_tag(cfg_base + ['radius', 'server'])

    # delete top level tag node
    if config.exists(cfg_base + ['radius-server']):
        config.delete(cfg_base + ['radius-server'])

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        sys.exit(1)
