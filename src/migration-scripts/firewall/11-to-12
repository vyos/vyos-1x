#!/usr/bin/env python3
#
# Copyright (C) 2023 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# T5681: Firewall re-writing. Simplify cli when mathcing interface
# From
    # set firewall ... rule <rule> [inbound-interface | outboubd-interface] interface-name <iface>
    # set firewall ... rule <rule> [inbound-interface | outboubd-interface] interface-group <iface_group>
# To
    # set firewall ... rule <rule> [inbound-interface | outboubd-interface] name <iface>
    # set firewall ... rule <rule> [inbound-interface | outboubd-interface] group <iface_group>

import re

from sys import argv
from sys import exit

from vyos.configtree import ConfigTree
from vyos.ifconfig import Section

if len(argv) < 2:
    print("Must specify file name!")
    exit(1)

file_name = argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

base = ['firewall']
config = ConfigTree(config_file)

if not config.exists(base):
    # Nothing to do
    exit(0)

## Migration from base chains
#if config.exists(base + ['interface', iface, direction]):
for family in ['ipv4', 'ipv6']:
    if config.exists(base + [family]):
        for hook in ['forward', 'input', 'output', 'name']:
            if config.exists(base + [family, hook]):
                for priority in config.list_nodes(base + [family, hook]):
                    if config.exists(base + [family, hook, priority, 'rule']):
                        for rule in config.list_nodes(base + [family, hook, priority, 'rule']):
                            for direction in ['inbound-interface', 'outbound-interface']:
                                if config.exists(base + [family, hook, priority, 'rule', rule, direction]):
                                    if config.exists(base + [family, hook, priority, 'rule', rule, direction, 'interface-name']):
                                        iface = config.return_value(base + [family, hook, priority, 'rule', rule, direction, 'interface-name'])
                                        config.set(base + [family, hook, priority, 'rule', rule, direction, 'name'], value=iface)
                                        config.delete(base + [family, hook, priority, 'rule', rule, direction, 'interface-name'])
                                    elif config.exists(base + [family, hook, priority, 'rule', rule, direction, 'interface-group']):
                                        group = config.return_value(base + [family, hook, priority, 'rule', rule, direction, 'interface-group'])
                                        config.set(base + [family, hook, priority, 'rule', rule, direction, 'group'], value=group)
                                        config.delete(base + [family, hook, priority, 'rule', rule, direction, 'interface-group'])

try:
    with open(file_name, 'w') as f:
        f.write(config.to_string())
except OSError as e:
    print("Failed to save the modified config: {}".format(e))
    exit(1)