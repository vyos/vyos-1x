#!/usr/bin/env python3
#
# Copyright (C) 2023 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# T5729: Switch to valueless whenever is possible.
# From
    # set policy [route | route6] ... rule <rule> log enable
    # set policy [route | route6] ... rule <rule> log disable
# To
    # set policy [route | route6] ... rule <rule> log
    # Remove command if log=disable

import re

from sys import argv
from sys import exit

from vyos.configtree import ConfigTree
from vyos.ifconfig import Section

if len(argv) < 2:
    print("Must specify file name!")
    exit(1)

file_name = argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

base = ['policy']
config = ConfigTree(config_file)

if not config.exists(base):
    # Nothing to do
    exit(0)

for family in ['route', 'route6']:
    if config.exists(base + [family]):
        
        for policy_name in config.list_nodes(base + [family]):
            if config.exists(base + [family, policy_name, 'rule']):
                for rule in config.list_nodes(base + [family, policy_name, 'rule']):
                    # Log
                    if config.exists(base + [family, policy_name, 'rule', rule, 'log']):
                        log_value = config.return_value(base + [family, policy_name, 'rule', rule, 'log'])
                        config.delete(base + [family, policy_name, 'rule', rule, 'log'])
                        if log_value == 'enable':
                            config.set(base + [family, policy_name, 'rule', rule, 'log'])
                    # State
                    if config.exists(base + [family, policy_name, 'rule', rule, 'state']):
                        flag_enable = 'False'
                        for state in ['established', 'invalid', 'new', 'related']:
                            if config.exists(base + [family, policy_name, 'rule', rule, 'state', state]):
                                state_value = config.return_value(base + [family, policy_name, 'rule', rule, 'state', state])
                                config.delete(base + [family, policy_name, 'rule', rule, 'state', state])
                                if state_value == 'enable':
                                    config.set(base + [family, policy_name, 'rule', rule, 'state', state])
                                    flag_enable = 'True'
                        if flag_enable == 'False':
                            config.delete(base + [family, policy_name, 'rule', rule, 'state'])

try:
    with open(file_name, 'w') as f:
        f.write(config.to_string())
except OSError as e:
    print("Failed to save the modified config: {}".format(e))
    exit(1)