#!/usr/bin/env python3
#
# Copyright (C) 2021 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# VyOS 1.2 crux allowed configuring a lower or upper case loglevel. This
# is no longer supported as the input data is validated and will lead to
# an error. If user specifies an upper case logleve, make it lowercase

from sys import argv
from sys import exit

from vyos.configtree import ConfigTree

if (len(argv) < 1):
    print("Must specify file name!")
    exit(1)

file_name = argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

base = ['service', 'conntrack-sync']
config = ConfigTree(config_file)

if not config.exists(base):
    # Nothing to do
    exit(0)
else:
    base_accept_proto = base + ['accept-protocol']
    if config.exists(base_accept_proto):
        tmp = config.return_value(base_accept_proto)
        config.delete(base_accept_proto)
        for protocol in tmp.split(','):
            config.set(base_accept_proto, value=protocol, replace=False)

    base_ignore_addr = base + ['ignore-address', 'ipv4']
    if config.exists(base_ignore_addr):
        tmp = config.return_values(base_ignore_addr)
        config.delete(base_ignore_addr)
        for address in tmp:
            config.set(base + ['ignore-address'], value=address, replace=False)

    # we no longer support cluster mode
    base_cluster = base + ['failover-mechanism', 'cluster']
    if config.exists(base_cluster):
        config.delete(base_cluster)

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        exit(1)
