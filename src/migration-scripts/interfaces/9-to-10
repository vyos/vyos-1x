#!/usr/bin/env python3
#
# Copyright (C) 2020 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# - rename CLI node 'dhcpv6-options delgate' to 'dhcpv6-options prefix-delegation
#   interface'
# - rename CLI node 'interface-id' for prefix-delegation to 'address' as it
#   represents the local interface IPv6 address assigned by DHCPv6-PD

from sys import exit, argv
from vyos.configtree import ConfigTree

if __name__ == '__main__':
    if (len(argv) < 1):
        print("Must specify file name!")
        exit(1)

    file_name = argv[1]
    with open(file_name, 'r') as f:
        config_file = f.read()

    config = ConfigTree(config_file)

    for intf_type in config.list_nodes(['interfaces']):
        for intf in config.list_nodes(['interfaces', intf_type]):
            # cache current config tree
            base_path = ['interfaces', intf_type, intf, 'dhcpv6-options',
                          'delegate']

            if config.exists(base_path):
                # cache new config tree
                new_path = ['interfaces', intf_type, intf, 'dhcpv6-options',
                             'prefix-delegation']
                if not config.exists(new_path):
                    config.set(new_path)

                # copy to new node
                config.copy(base_path, new_path + ['interface'])

                # rename interface-id to address
                for interface in config.list_nodes(new_path + ['interface']):
                    config.rename(new_path + ['interface', interface, 'interface-id'], 'address')

                # delete old noe
                config.delete(base_path)

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        exit(1)
