#!/usr/bin/env python3

# Change syntax of wireless interfaces
# Migrate boolean nodes to valueless

import sys
from vyos.configtree import ConfigTree

if (len(sys.argv) < 1):
    print("Must specify file name!")
    sys.exit(1)

file_name = sys.argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

config = ConfigTree(config_file)
base = ['interfaces', 'wireless']

if not config.exists(base):
    # Nothing to do
    sys.exit(0)
else:
    for wifi in config.list_nodes(base):
        # as converting a node to bool is always the same, we can script it
        to_bool_nodes = ['capabilities ht 40MHz-incapable',
                         'capabilities ht auto-powersave',
                         'capabilities ht delayed-block-ack',
                         'capabilities ht dsss-cck-40',
                         'capabilities ht greenfield',
                         'capabilities ht ldpc',
                         'capabilities ht lsig-protection',
                         'capabilities ht stbc tx',
                         'capabilities require-ht',
                         'capabilities require-vht',
                         'capabilities vht antenna-pattern-fixed',
                         'capabilities vht ldpc',
                         'capabilities vht stbc tx',
                         'capabilities vht tx-powersave',
                         'capabilities vht vht-cf',
                         'expunge-failing-stations',
                         'isolate-stations']

        for node in to_bool_nodes:
            if config.exists(base + [wifi, node]):
                tmp = config.return_value(base + [wifi, node])
                # delete old node
                config.delete(base + [wifi, node])
                # set new node if it was enabled
                if tmp == 'true':
                    # OLD CLI used camel casing in 40MHz-incapable which is
                    # not supported in the new backend. Convert all to lower-case
                    config.set(base + [wifi, node.lower()])

        # Remove debug node
        if config.exists(base + [wifi, 'debug']):
            config.delete(base + [wifi, 'debug'])

        # RADIUS servers
        if config.exists(base + [wifi, 'security', 'wpa', 'radius-server']):
            for server in config.list_nodes(base + [wifi, 'security', 'wpa', 'radius-server']):
                base_server = base + [wifi, 'security', 'wpa', 'radius-server', server]

                # Migrate RADIUS shared secret
                if config.exists(base_server + ['secret']):
                    key = config.return_value(base_server + ['secret'])
                    # write new configuration node
                    config.set(base + [wifi, 'security', 'wpa', 'radius', 'server', server, 'key'], value=key)
                    # format as tag node
                    config.set_tag(base + [wifi, 'security', 'wpa', 'radius', 'server'])

                # Migrate RADIUS port
                if config.exists(base_server + ['port']):
                    port = config.return_value(base_server + ['port'])
                    # write new configuration node
                    config.set(base + [wifi, 'security', 'wpa', 'radius', 'server', server, 'port'], value=port)
                    # format as tag node
                    config.set_tag(base + [wifi, 'security', 'wpa', 'radius', 'server'])

                # Migrate RADIUS accounting
                if config.exists(base_server + ['accounting']):
                    port = config.return_value(base_server + ['accounting'])
                    # write new configuration node
                    config.set(base + [wifi, 'security', 'wpa', 'radius', 'server', server, 'accounting'])
                    # format as tag node
                    config.set_tag(base + [wifi, 'security', 'wpa', 'radius', 'server'])

            # delete old radius-server nodes
            config.delete(base + [wifi, 'security', 'wpa', 'radius-server'])

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        sys.exit(1)
